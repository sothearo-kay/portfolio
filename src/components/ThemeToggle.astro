---
import MoonIcon from "~/icons/theme/moon.svg"
import SunIcon from "~/icons/theme/sun.svg"
import Hidden from "./common/Hidden.astro"
---

<button id="theme-toggle" class="icon-button theme-toggle" aria-label="Toggle theme">
  <SunIcon class="icon sun" />
  <MoonIcon class="icon moon" />
  <Hidden>
    Switch Colorscheme
  </Hidden>
</button>

<script is:inline>
  function setTheme(document) {
    const theme = localStorage.getItem("theme")
    const prefersDark = window.matchMedia("(prefers-color-scheme: dark)").matches
    const isDark = theme === "dark" || (!theme && prefersDark)

    if (isDark) {
      document.documentElement.setAttribute("data-theme", "dark")
    }
    else {
      document.documentElement.removeAttribute("data-theme")
    }
  }

  function updateMetaThemeColor() {
    const bgColor = getComputedStyle(document.body).backgroundColor
    const metaThemeColor = document.querySelector("meta[name=theme-color]")

    if (metaThemeColor) {
      metaThemeColor.setAttribute("content", bgColor)
    }
  }

  setTheme(document)
  requestAnimationFrame(updateMetaThemeColor)

  document.addEventListener("astro:before-swap", (event) => {
    setTheme(event.newDocument)
  })

  document.addEventListener("astro:after-swap", updateMetaThemeColor)

  document.addEventListener("astro:page-load", () => {
    const themeToggle = document.getElementById("theme-toggle")
    const html = document.documentElement

    if (!themeToggle)
      return

    const isAppearanceTransition = typeof document !== "undefined"
      && document.startViewTransition
      && !window.matchMedia("(prefers-reduced-motion: reduce)").matches

    function applyThemeChange() {
      setTheme(document)
      requestAnimationFrame(updateMetaThemeColor)
    }

    function toggleTheme(event) {
      const isDark = html.getAttribute("data-theme") === "dark"
      localStorage.setItem("theme", isDark ? "light" : "dark")

      if (!isAppearanceTransition || !event) {
        applyThemeChange()
        return
      }

      const x = event.clientX
      const y = event.clientY
      const endRadius = Math.hypot(
        Math.max(x, innerWidth - x),
        Math.max(y, innerHeight - y),
      )

      const transition = document.startViewTransition(applyThemeChange)

      transition.ready.then(() => {
        const clipPath = [
          `circle(0px at ${x}px ${y}px)`,
          `circle(${endRadius}px at ${x}px ${y}px)`,
        ]

        html.animate(
          {
            clipPath,
          },
          {
            duration: 400,
            easing: "ease-in",
            pseudoElement: "::view-transition-new(root)",
          },
        )
      })
    }

    themeToggle.addEventListener("click", toggleTheme)
  })
</script>

<style>
  .theme-toggle {
    .icon {
      &.sun {
        display: block;
      }

      &.moon {
        display: none;
      }
    }
  }

  :global([data-theme="dark"]) .theme-toggle {
    .icon {
      &.sun {
        display: none;
      }

      &.moon {
        display: block;
      }
    }
  }
</style>
