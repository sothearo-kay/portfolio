---
import { getPosts } from "~/utils/blog"
import CommandPaletteLazy from "../command/CommandPaletteLazy.svelte"
import Separator from "../common/Separator.astro"
import SearchButton from "../SearchButton.svelte"
import ThemeToggle from "../ThemeToggle.astro"

const navItems = [
  { href: "/", text: "Home" },
  { href: "/blog", text: "Blog" },
  { href: "/projects", text: "Projects" },
]

const currentPath = new URL(Astro.request.url).pathname

function isActive(href: string) {
  const normalizedCurrent = currentPath === "/" ? "/" : currentPath.replace(/\/$/, "")
  const normalizedHref = href === "/" ? "/" : href.replace(/\/$/, "")

  return normalizedHref === "/"
    ? normalizedCurrent === "/"
    : normalizedCurrent.startsWith(normalizedHref)
}

const allBlogPosts = await getPosts()
const posts = allBlogPosts.map(post => ({
  id: post.id,
  title: post.data.title,
}))
---

<header class="header" transition:name="header">
  <div class="wrapper">
    <nav class="nav">
      <ul class="nav-list">
        {navItems.map(item => (
          <li class:list={["nav-item", { active: isActive(item.href) }]}>
            <a href={item.href} class:list={["nav-link", { active: isActive(item.href) }]}>
              {item.text}
            </a>
          </li>
        ))}
      </ul>
    </nav>

    <Separator orientation="vertical" />

    <div class="actions">
      <SearchButton client:idle />
      <ThemeToggle />
    </div>
  </div>
  <CommandPaletteLazy {posts} client:idle />
</header>

<script>
 document.addEventListener("astro:page-load", () => {
   let lastScrollY = 0
   let isScrolled = false
   let ticking = false
   const header = document.querySelector(".header")

   function updateHeader() {
     const currentScrollY = window.scrollY
     const scrollDiff = currentScrollY - lastScrollY

     const isMobile = /iPhone|iPad|iPod|Android/i.test(navigator.userAgent)
     const threshold = isMobile ? 10 : 3

     if (Math.abs(scrollDiff) > threshold) {
       if (currentScrollY > 50 && scrollDiff > 0) {
         isScrolled = true
       }
       else if (scrollDiff < -threshold) {
         isScrolled = false
       }
     }

     if (header) {
       header.classList.toggle("scrolled", isScrolled)
     }

     lastScrollY = currentScrollY
   }

   function handleScroll() {
     if (!ticking) {
       requestAnimationFrame(() => {
         updateHeader()
         ticking = false
       })
       ticking = true
     }
   }

   window.addEventListener("scroll", handleScroll, { passive: true })
 })
</script>

<style>
  .header {
    position: sticky;
    top: 1rem;
    left: 0;
    width: 100%;
    z-index: 10;
    display: flex;
    align-items: center;
    justify-content: center;
    margin-top: 1rem;

    .wrapper {
      display: flex;
      align-items: center;
      justify-content: center;
      gap: 1rem;
      padding: 0.5rem 1rem;
      border-radius: 999px;
      background-color: var(--color-background-elevated-transparent);
      border: 1px solid var(--color-border-subtle);
      box-shadow: var(--shadow-header);
      backdrop-filter: blur(0);
    }

    .nav-list {
      width: 200px;
      display: flex;
      align-items: center;
      justify-content: space-between;
      gap: 1rem;
      transition: width 0.2s ease;
    }

    .nav-item {
      font-size: 14px;
      font-weight: 500;

      .nav-link {
        padding: 0.5rem;
        color: var(--color-accent-foreground);
        transition: color 0.2s ease;

        &:hover,
        &.active {
          color: var(--color-foreground);
        }
      }
    }

    .actions {
      display: flex;
      align-items: center;
      gap: 0.25rem;
    }

    &.scrolled {
      .nav-list {
        width: 60px;
        justify-content: center;
      }

      .nav-item:not(.active) {
        display: none;
      }
    }
  }
</style>
