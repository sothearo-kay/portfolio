---
import type { Manga } from "~/data/manga"
import MangaCard from "./MangaCard.astro"

interface Props {
  mangaList: Manga[]
}

const { mangaList } = Astro.props

const totalCount = mangaList.length
const readingCount = mangaList.filter(manga => !manga.finished).length
const finishedCount = mangaList.filter(manga => manga.finished).length

const filterButtons = [
  { key: "all", label: "All", count: totalCount },
  { key: "reading", label: "Reading", count: readingCount },
  { key: "finished", label: "Finished", count: finishedCount },
] as const

function getTransitionName(title: string) {
  return `manga-${title.replace(/\s+/g, "-").toLowerCase()}`
}
---

<div class="container">
  <div class="filters">
    {filterButtons.map(({ key, label, count }, index) => (
      <button
        class:list={["btn", { active: index === 0 }]}
        data-filter={key}
      >
        {label} ({count})
      </button>
    ))}
  </div>

  <ul class="grid">
    {mangaList.map(manga => (
      <li
        class="item"
        data-status={manga.finished ? "finished" : "reading"}
        style={`view-transition-name: ${getTransitionName(manga.title)}`}
      >
        <MangaCard
          title={manga.title}
          coverId={manga.coverId}
          rating={manga.rating}
        />
      </li>
    ))}
  </ul>
</div>

<script>
  import "~/scripts/manga-filter.ts"
</script>

<style>
  .container {
    width: 100%;

    .filters {
      display: flex;
      justify-content: center;
      gap: 0.5rem;
      margin-block: var(--block-spacing);
    }

    .btn {
      height: 2rem;
      padding-inline: 0.75rem;
      border: 1px solid var(--color-border);
      background: var(--color-background);
      color: var(--color-foreground-muted);
      border-radius: 999px;
      box-shadow: var(--shadow-inset);
      font: var(--font-xs);
      font-weight: 500;
      transition: 0.2s ease;
      transition-property: background-color, border-color, color, box-shadow;

      &:hover {
        background-color: var(--color-background-secondary);
        border-color: var(--color-border);
        color: var(--color-foreground);
      }

      &:active {
        transform: scale(0.98);
      }

      &.active {
        background-color: var(--color-foreground);
        border-color: var(--color-foreground);
        color: var(--color-background);
        box-shadow: var(--shadow-inset-active);
      }
    }

    .grid {
      display: grid;
      grid-template-columns: repeat(auto-fit, minmax(160px, 1fr));
      gap: 1.5rem;
    }
  }
</style>
